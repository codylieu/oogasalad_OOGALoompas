package main.java.data.datahandler;

import java.io.IOException;

import main.java.schema.GameBlueprint;

/**
 * 
 * Data Handler specific to the authoring environment.
 * Allows them to save a blueprint
 * generated by the author.
 * Also allows for reverse functionality so that
 * they can load a previously saved blueprint,
 * so that they can finish/add to their game.
 * 
 * @author Jimmy Fang
 *
 */

public class AuthorDataHandler extends DataHandler {

	public AuthorDataHandler(){
		super();
	}

	/**
	 * Method for authoring environment to
	 * take a blueprint and file location and serialize
	 * into output stream
	 * @param currentBlueprint
	 * @param filePath
	 * @throws IOException 
	 */
	
	public void saveBlueprint(GameBlueprint currentBlueprint, String filePath) throws IOException {
		saveBundle(new DataBundle(currentBlueprint), filePath);
	}
	
	/**
	 * 
	 * @param filePath
	 * @return translate output stream into a GameBlueprint
	 * so that authoring environment can allow user to 
	 * load half creating environments and modify
	 * them
	 * @throws IOException 
	 * @throws ClassNotFoundException 
	 */
	
	public GameBlueprint loadBlueprint(String filePath) throws ClassNotFoundException, IOException {
		return loadBundle(filePath).getBlueprint();
	}
}
